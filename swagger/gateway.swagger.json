{
  "swagger": "2.0",
  "info": {
    "title": "storage",
    "version": "0.0.1"
  },
  "host": ".endpoints.phdigidev.cloud.goog",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/operation": {
      "post": {
        "operationId": "Operation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageOperationRes"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageOperationReq"
            }
          }
        ],
        "tags": [
          "Storage"
        ]
      }
    },
    "/v1/operation/delete/stream": {
      "delete": {
        "operationId": "StreamDelete",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/definitions/storageRes"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageReq"
            }
          }
        ],
        "tags": [
          "Storage"
        ]
      }
    },
    "/v1/operation/delete/{ID}": {
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageRes"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageReq"
            }
          }
        ],
        "tags": [
          "Storage"
        ]
      }
    },
    "/v1/operation/get/stream": {
      "post": {
        "operationId": "StreamGet",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/definitions/storageRes"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageOperationReq"
            }
          }
        ],
        "tags": [
          "Storage"
        ]
      }
    },
    "/v1/operation/get/{ID}": {
      "get": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageRes"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Storage"
        ]
      }
    },
    "/v1/operation/set": {
      "post": {
        "operationId": "Set",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageRes"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageReq"
            }
          }
        ],
        "tags": [
          "Storage"
        ]
      }
    },
    "/v1/operation/set/stream": {
      "post": {
        "operationId": "StreamSet",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/definitions/storageRes"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageReq"
            }
          }
        ],
        "tags": [
          "Storage"
        ]
      }
    },
    "/v1/operation/stream": {
      "post": {
        "operationId": "StreamOperation",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/definitions/storageOperationRes"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageOperationReq"
            }
          }
        ],
        "tags": [
          "Storage"
        ]
      }
    }
  },
  "definitions": {
    "protobufListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protobufStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Unordered map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "protobufValue": {
      "type": "object",
      "properties": {
        "null_value": {
          "$ref": "#/definitions/protobufNullValue",
          "description": "Represents a null value."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "string_value": {
          "type": "string",
          "description": "Represents a string value."
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "Represents a boolean value."
        },
        "struct_value": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Represents a structured value."
        },
        "list_value": {
          "$ref": "#/definitions/protobufListValue",
          "description": "Represents a repeated `Value`."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    },
    "storageConfig": {
      "type": "object",
      "properties": {
        "data": {
          "type": "boolean",
          "format": "boolean",
          "title": "KeysOnly makes sense only in the context of a non-direct query"
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "title": "Don't try to control the iterator through the RPC, let the interface take care of that and sent to a different\nhandler if this is set\nbool singlePayload = 2;"
        },
        "type": {
          "$ref": "#/definitions/storageEnumOperationType"
        }
      },
      "title": "Default value means all of these are off, meaning a default request will return you:\nOnly the key and there will be no limit"
    },
    "storageDeleteAttributes": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "storageDirect": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/storageEnumOperationType"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageItem"
          }
        }
      }
    },
    "storageEnumOperationType": {
      "type": "string",
      "enum": [
        "GET",
        "SET",
        "DELETE"
      ],
      "default": "GET"
    },
    "storageEnumStatusCode": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SUCCESS",
        "NOT_FOUND",
        "ALREADY_DELETED"
      ],
      "default": "UNKNOWN"
    },
    "storageFilter": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "title": "The ID will be - key:op:value; this might be used in the return"
        },
        "set": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageFilterSet"
          },
          "title": "These values will be AND'd together during the query"
        },
        "cfg": {
          "$ref": "#/definitions/storageConfig",
          "title": "Filter-level config; the global override config will be taken into account BEFORE the local config"
        }
      }
    },
    "storageFilterSet": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "Filterset contains the set of information making up the filter operation"
    },
    "storageItem": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "title": "ID and timestamp are required regardless of operation"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "upsert": {
          "$ref": "#/definitions/storageUpsertAttributes",
          "title": "If performing an upsert, you will fill this value"
        },
        "delete": {
          "$ref": "#/definitions/storageDeleteAttributes",
          "title": "If performing a delete, you will give this value"
        }
      }
    },
    "storageItemMap": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/storageRes"
          }
        }
      }
    },
    "storageOperationReq": {
      "type": "object",
      "properties": {
        "direct": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageDirect"
          },
          "title": "Direct object mutations"
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageFilter"
          },
          "title": "These values will be OR'd together during the query"
        },
        "override": {
          "$ref": "#/definitions/storageOverride",
          "title": "Override settings"
        }
      }
    },
    "storageOperationRes": {
      "type": "object",
      "properties": {
        "queryRes": {
          "$ref": "#/definitions/storageItemMap"
        },
        "filterRes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageItemMap"
          }
        },
        "length": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "For now just return the filter array in the same order that you got it in\nWill work well with go funcs"
    },
    "storageOverride": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "title": "Limit override for the entire query"
        }
      }
    },
    "storageReq": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        }
      }
    },
    "storageRes": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/storageStatus"
        },
        "item": {
          "$ref": "#/definitions/storageItem"
        }
      }
    },
    "storageSecondaryValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufValue"
        }
      }
    },
    "storageStatus": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/storageEnumStatusCode"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "storageUpsertAttributes": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/protobufValue",
          "title": "Item value"
        },
        "secondaryKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageSecondaryValue"
          },
          "title": "All of the secondary accessable key:value pairs"
        }
      }
    }
  },
  "securityDefinitions": {
    "firebase": {
      "type": "oauth2",
      "description": "Used to authenticate Firebase",
      "in": "header",
      "flow": "implicit",
      "authorizationUrl": "https://securetoken.google.com/phdigidev"
    }
  },
  "security": [
    {
      "firebase": []
    }
  ]
}
