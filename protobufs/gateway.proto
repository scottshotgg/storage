syntax = "proto3";
option go_package = "protobuf";
package storage;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "item.proto";
import "operation.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "storage";
    version: "0.0.1";
  };

  schemes: HTTPS;
  host: ".endpoints.phdigidev.cloud.goog";
  consumes: "application/json";
  produces: "application/json";

  security_definitions: {
    security: {
      key: "firebase";
      value: {
        type: TYPE_OAUTH2,
        in: IN_HEADER
        description: "Used to authenticate Firebase",
        flow: FLOW_IMPLICIT,
        authorization_url: "https://securetoken.google.com/phdigidev"
      };
    }
  }
  security: [
    {
      security_requirement: {
        key: "firebase";
        value: {};
      }
    }
  ]
};

service Storage {
  rpc Operation(OperationReq) returns (OperationRes) {
    option (google.api.http) = {
      post: "/v1/operation"
      body: "*"
    };
  }

  rpc StreamOperation(stream OperationReq) returns (stream OperationRes) {
    option (google.api.http) = {
      post: "/v1/operation/stream"
      body: "*"
    };
  }

  rpc Get(Req) returns (Res) {
    option (google.api.http) = {
      get: "/v1/operation/get/{ID}"
    };
  }

  rpc StreamGet(stream OperationReq) returns (stream Res) {
    option (google.api.http) = {
      post: "/v1/operation/get/stream"
      body: "*"
    };
  }

  rpc Set(Req) returns (Res) {
    option (google.api.http) = {
      post: "/v1/operation/set"
      body: "*"
    };
  }

  rpc StreamSet(stream Req) returns (stream Res) {
    option (google.api.http) = {
      post: "/v1/operation/set/stream"
      body: "*"
    };
  }

  rpc Delete(Req) returns (Res) {
    option (google.api.http) = {
      delete: "/v1/operation/delete/{ID}"
      body: "*"
    };
  }

  rpc StreamDelete(stream Req) returns (stream Res) {
    option (google.api.http) = {
      delete: "/v1/operation/delete/stream"
      body: "*"
    };
  }

  // ---- Don't know if we need these

  // rpc Get(OperationReq) returns (OperationRes) {
  //   option (google.api.http) = {
  //     post: "/v1/operation/get"
  //     body: "*"
  //   };
  // }

  // rpc Delete(OperationReq) returns (OperationRes) {
  //   option (google.api.http) = {
  //     delete: "/v1/operation/delete"
  //     body: "*"
  //   };
  // }
}

message ItemMap {
  map<string, Res> items = 1;
}

message Res {
  Status status = 1;
  Item item = 3;
}

message Req {
  string ID = 1;
}

// For now just return the filter array in the same order that you got it in
// Will work well with go funcs
message OperationRes {
  ItemMap queryRes = 1;
  repeated ItemMap filterRes = 2;
  int32 length = 3;
}

message OperationReq {
  // Direct object mutations
  repeated Direct direct = 1;

  // These values will be OR'd together during the query
  repeated Filter filters = 2;

  // Override settings
  Override override = 3;
}